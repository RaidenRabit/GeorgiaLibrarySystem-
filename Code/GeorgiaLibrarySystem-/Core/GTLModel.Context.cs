//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Context : DbContext
    {
        public Context()
            : base("name=Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Copy> Copies { get; set; }
        public virtual DbSet<Librarian> Librarians { get; set; }
        public virtual DbSet<LibrarianType> LibrarianTypes { get; set; }
        public virtual DbSet<Library> Libraries { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<MaterialType> MaterialTypes { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberCard> MemberCards { get; set; }
        public virtual DbSet<MemberType> MemberTypes { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<readAllMaterial> readAllMaterials { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Login(Nullable<int> sSN, string password)
        {
            var sSNParameter = sSN.HasValue ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Login", sSNParameter, passwordParameter);
        }
    
        public virtual int Returning(Nullable<int> copyId)
        {
            var copyIdParameter = copyId.HasValue ?
                new ObjectParameter("CopyId", copyId) :
                new ObjectParameter("CopyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Returning", copyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateMaterials(Nullable<int> sSN, Nullable<int> iSBN, string library, string author, string description, string title, string typeName, Nullable<int> quantity)
        {
            var sSNParameter = sSN.HasValue ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(int));
    
            var iSBNParameter = iSBN.HasValue ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(int));
    
            var libraryParameter = library != null ?
                new ObjectParameter("library", library) :
                new ObjectParameter("library", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateMaterials", sSNParameter, iSBNParameter, libraryParameter, authorParameter, descriptionParameter, titleParameter, typeNameParameter, quantityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCopy(Nullable<int> sSN, Nullable<int> copyId)
        {
            var sSNParameter = sSN.HasValue ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(int));
    
            var copyIdParameter = copyId.HasValue ?
                new ObjectParameter("CopyId", copyId) :
                new ObjectParameter("CopyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCopy", sSNParameter, copyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteMaterial(Nullable<int> sSN, Nullable<int> iSBN)
        {
            var sSNParameter = sSN.HasValue ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(int));
    
            var iSBNParameter = iSBN.HasValue ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteMaterial", sSNParameter, iSBNParameter);
        }
    
        public virtual int NoticeSent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NoticeSent");
        }
    
        public virtual int NoticeFilling()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NoticeFilling");
        }
    }
}
